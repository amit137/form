import{useState,useEffect} from 'react';
import React from 'react';


// import './App.css';
function App() {
const startVal={firstname:"",lastname:"",email:"",password:"",year:"",branch:"",customRadioInline1:"",customRadioInline2:"",city:"",state:"",zip:""};
const [informValues, setInformValues]= useState(startVal);
const [formErrors,setFormErrors] =useState({});
const [isSubmit, setIsSubmit] = useState(false);

const handleChange =(e)=>
{

  console.log(e.target); 
  const{name , value} =e.target;
  setInformValues({...informValues,[name]:value});
  console.log(informValues);
};

const handleSubmit =(e) =>
{
  e.preventDefault();
setFormErrors(validate(informValues));
setIsSubmit(true);

};

useEffect(() => {
  console.log(formErrors);
  if(Object.keys(formErrors).length=== 0 && isSubmit)
  {
    console.log(informValues);
  }
  }, [formErrors,informValues,isSubmit]);



const validate =(values)=> {
const errors ={}
let regex = new RegExp('[a-z0-9]+@akgec.ac.in');
if(!values.firstname)
{
  errors.firstname="firstname is required!";
}

if(!values.lastname)
{
  errors.lastname="lastname is required!";
}
if(!values.email)
{
  errors.email="email is required!";
}
else if(!regex.test(values.email))
{
  errors.email="This is not a valid email format!";
}
if(!values.password)
{
  errors.password="password is required!";
}
else if(values.password.length <8){
  errors.password="password must be of 8 or more characters";
}
else if(values.password.length >15){
  errors.password="password must be less than 15 characters";
}
else if(values.password.match(/[A-Z]/)==null){
  errors.password="use atleast one uppercase";
}
else if(values.password.match(/[a-z]/)==null){
  errors.password="use atleast one lowercase";
}
else if(values.password.match(/[0-9]/)==null){
  errors.password="use atleast one number";
}
else if(values.password.match(/[!-*]/)==null){
  errors.password="use atleast one specialcharacter";
}
if(!values.year)
{
  errors.year="select your year!";
}
if(!values.branch)
{
  errors.branch="select your branch!";
}
if(!values.city)
{
  errors.city="city is required!";
}
if(!values.state)
{
  errors.state="state is required!";
}
if(!values.zip)
{
  errors.zip="zip is required!";
}
if(!values.check)
{
  errors.check="A must  required!";
}
return errors;

}  

  return (
    < >



<header>SIGN-UP</header>


    <div className="container">
      {Object.keys(formErrors).length=== 0 && isSubmit ? (<div className='success'>Signed UP Successfully</div>) :(

<pre>{JSON.stringify(informValues,undefined,2)}</pre> ) }
    
    <form onSubmit={handleSubmit} action="">
<div className="form">
  <div className="row">
    <div className="col">
      <input type="text" className="form-control" name='firstname' placeholder="First name" value={informValues.firstname}
      onChange={handleChange}/>
      <p>{formErrors.firstname}</p>
    </div>
    <div className="col">
      <input type="text" className="form-control" name='lastname' placeholder="Last name" value={informValues.lastname}
      onChange={handleChange}/>
      <p>{formErrors.lastname}</p>
    </div>
    <input type="email" className="form-control" name='email' placeholder="Roll Number" value={informValues.email} onChange={handleChange}/>
    <p>{formErrors.email}</p>
  </div>
    <div className="form-group">
    <label for="inputPassword6">Password</label>
  <input type="password" id="inputPassword6" className="form-control mx-sm-3" name='password' aria-describedby="passwordHelpInline" value={informValues.password} onChange={handleChange}/>
    <small id="passwordHelpInline" className="text-muted">
      Must be 8-20 characters long.
    </small>
    <p>{formErrors.password}</p>
  </div>

  <div className="form-group col-md-4">
      <label for="inputState">Year</label>
      <select id="inputState" name='year' className="form-control" value={informValues.year} onChange={handleChange}>
        <option selected>Choose...</option>
        <option>1st Year</option>
        <option>2nd Year</option>
        <option>3rd Year</option>
        <option>4th Year</option>
      </select>
      <p>{formErrors.year}</p>
    </div>
    <div className="form-group col-md-4">
      <label for="inputState">Branch</label>
      <select id="inputState" name='branch' className="form-control" value={informValues.branch} onChange={handleChange}>
        <option selected>Choose...</option>
        <option>CSE</option>
        <option>CSE(AIML)</option>
        <option>CSE(DS)</option>
        <option>CS</option>
        <option>IT</option>
        <option>CS-IT</option>
        <option>ECE</option>
        <option>EN</option>
        <option>CIVIL</option>
        <option>MECH</option>
      </select>
      <p>{formErrors.branch}</p>
    </div>
    <div>
      <p>Gender</p>
      <div className="custom-control custom-radio custom-control-inline">
  <input type="radio" id="customRadioInline1" name="customRadioInline1" className="custom-control-input" value={informValues.customRadioInline1}/>
  <label className="custom-control-label" for="customRadioInline1">Male</label>
</div>
<div className="custom-control custom-radio custom-control-inline">
  <input type="radio" id="customRadioInline2" name="customRadioInline1" className="custom-control-input" value={informValues.customRadioInline2}/>
  <label className="custom-control-label" for="customRadioInline2">Female</label>
</div>
</div>


<div className="form-row">
    <div className="col-md-6 mb-3">
      <label for="validationDefault03">City</label>
      <input type="text" className="form-control" name='city' id="validationDefault03" placeholder="City" value={informValues.city} onChange={handleChange}/>
      <p>{formErrors.city}</p>
    </div>
    <div className="col-md-3 mb-3">
      <label for="validationDefault04">State</label>
      <input type="text" className="form-control" name='state' id="validationDefault04" placeholder="State" value={informValues.state} onChange={handleChange}/>
      <p>{formErrors.state}</p>
    </div>
    <div className="col-md-3 mb-3">
      <label for="validationDefault05">Zip</label>
      <input type="text" className="form-control" name='zip' id="validationDefault05" placeholder="Zip"  value={informValues.zip} onChange={handleChange}/>
      <p>{formErrors.zip}</p>
    </div>
  </div>
  <div className="form-group">
    <div className="form-check">
      <input className="form-check-input" type="checkbox"  id="invalidCheck2" name='check' />
      <label className="form-check-label" for="invalidCheck2">
        Agree to terms and conditions
      </label>
      <p>{formErrors.check}</p>
    </div>
  </div>


  <button type='submit' className='fluid ui button blue'>submit</button>
  </div>
    </form>
    </div> 
    </>
  );
}

export default App;